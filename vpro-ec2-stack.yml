---
- name: Setup Vprofile Stack
  hosts: localhost
  connection: local
  gather_facts: no
  collections:
    - amazon.aws

  tasks:
    - name: Import VPC setup Variables
      include_vars:
        file: vars/output_vars

    - name: Import vprofile setup variables
      include_vars:
        file: vars/vprostacksetup

    - name: Create vprofile ec2-key
      amazon.aws.ec2_key:
        name: vprokey
        region: "{{ region }}"
      register: vprokey_out

    - name: Save private key into file loginkey_vpro.pem
      copy:
        content: "{{ vprokey_out.key.private_key }}"
        dest: "./loginkey_vpro.pem"
        mode: '0600'
      when: vprokey_out.changed

    - name: Create Security group for load balancer
      amazon.aws.ec2_security_group:
        name: vproELB-SG
        description: Allow port 80 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

    - name: Create Security group for vprofile stack
      amazon.aws.ec2_security_group:
        name: vproStack-SG
        description: Allow port 22 from everywhere and all port within sg
        region: "{{ region }}"
        vpc_id: "{{ vpc_id }}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}"
      register: vproStackSG_out

    - name: Update security group with its own sg id
      amazon.aws.ec2_security_group:
        name: vproStack-SG
        description: Allow all protocols within itself
        region: "{{ region }}"
        vpc_id: "{{ vpc_id }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{ vproStackSG_out.group_id }}"

    - name: Create NGINX instance
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ nginx_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "web01"
        security_group_ids:
          - "{{ vproStackSG_out.group_id }}"
        subnet_id: "{{ privsub1id }}"
      register: web01_out

    - name: Create Tomcat instance
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ tomcat_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "app01"
        security_group_ids:
          - "{{ vproStackSG_out.group_id }}"
        subnet_id: "{{ privsub1id }}"
      register: app01_out

    - name: Create Memcached instance
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ memcache_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "mc01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "mc01"
        security_group_ids:
          - "{{ vproStackSG_out.group_id }}"
        subnet_id: "{{ privsub1id }}"
      register: mc01_out

    - name: Create RabbitMQ instance
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ rmq_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "rmq01"
        security_group_ids:
          - "{{ vproStackSG_out.group_id }}"
        subnet_id: "{{ privsub1id }}"
      register: rmq01_out

    - name: Create MySQL instance
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ mysql_ami }}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        count_tag:
          Name: "db01"
        security_group_ids:
          - "{{ vproStackSG_out.group_id }}"
        subnet_id: "{{ privsub1id }}"
      register: db01_out

    - debug:
        var: db01_out.tagged_instances[0].id

    - name: Create Classic ELB
      amazon.aws.elb_classic_lb:
        name: "vprofile-elb"
        region: "{{ region }}"
        state: present
        instances:
          - "{{ web01_out.tagged_instances[0].id }}"
        purge_instance_ids: true
        security_group_ids:
          - "{{ vproELBSG_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80

    - name: Insert/Update hosts IP and name in file provision-stack
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          web01_ip: {{ web01_out.tagged_instances[0].private_ip }}
          app01_ip: {{ app01_out.tagged_instances[0].private_ip }}
          rmq01_ip: {{ rmq01_out.tagged_instances[0].private_ip }}
          mc01_ip: {{ mc01_out.tagged_instances[0].private_ip }}
          db01_ip: {{ db01_out.tagged_instances[0].private_ip }}

    - name: Copy login key to provision stack directory
      copy:
        src: loginkey_vpro.pem
        dest: provision-stack/loginkey_vpro.pem
        mode: '0400'

    - name: Insert/Update inventory file provision stack/inventory vpro
      blockinfile:
        path: provision-stack/inventory-vpro
        block: |
          web01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
          app01 ansible_host={{ app01_out.tagged_instances[0].private_ip }}
          rmq01 ansible_host={{ rmq01_out.tagged_instances[0].private_ip }}
          mc01 ansible_host={{ mc01_out.tagged_instances[0].private_ip }}
          db01 ansible_host={{ db01_out.tagged_instances[0].private_ip }}
          cntl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey_vpro.pem
          # ansible_python_interpreter=/usr/bin/python3
